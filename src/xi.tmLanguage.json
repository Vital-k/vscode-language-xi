{
  "comment": [
    "TODO: none yet"
  ],
	"patterns": [{
    "comment": "caption",
    "name": "beginning.punctuation.definition.list.markdown.xi",
    "match": "^[^ ].* @$",
    "captures": {"0": {"patterns": [{"include": "#header-end"}]}}
  },

  {
    "comment": "headers"
  }, {
    "comment": "h1, keyword, tag name",
    "name": "entity.name.function.xi",
    "match": "^[^ ].* \\.$",
    "captures": {"0": {"patterns": [{"include": "#header-end"}]}}
  }, {
    "comment": "h2, callable",
    "name": "entity.name.class.xi",
    "match": "^ {2}[^ ].* \\.$",
    "captures": {"0": {"patterns": [{"include": "#header-end"}]}}
  }, {
    "comment": "h3, property",
    "name": "constant.character.character-class.regexp.xi",
    "match": "^ {4}[^ ].* \\.$",
    "captures": {"0": {"patterns": [{"include": "#header-end"}]}}
  }, {
    "comment": "h4, type",
    "name": "constant.regexp.xi",
    "match": "^ {6}[^ ].* \\.$",
    "captures": {"0": {"patterns": [{"include": "#header-end"}]}}
  }, {
    "comment": "h5, enum, preprocessor, constant",
    "name": "keyword.control.xi",
    "match": "^ {8}[^ ].* \\.$",
    "captures": {"0": {"patterns": [{"include": "#header-end"}]}}
  }, {
    "comment": "h6, number",
    "name": "invalid.xi",
    "match": "^ {10}[^ ].* \\.$",
    "captures": {"0": {"patterns": [{"include": "#header-end"}]}}
  },

  {
    "comment": "paragraph with code block start",
    "match": "^ *([\\.\\?\\!\\*\\#\\+\\-] )*\\|($| .+$|\\{[^\\}]*\\}$|\\{[^\\}]*\\} .+$)",
    "captures": {
      "0": {"patterns": [{"include": "#code-block"}]},
      "1": {"name": "constant.other.color.rgb-value.xi"}
    }
  },

  {
    "comment": "paragraph start",
    "match": "^ *([\\.\\?\\!\\*\\#\\+\\-]) (.+)",
    "captures": {
      "1": {"name": "constant.other.color.rgb-value.xi"},
      "2": {
        "patterns": [{
          "include": "#http-link"
        }, {
          "comment": "before 'special', ex |{lng:foo}bar| is code",
          "include": "#code-inline"
        }, {
          "include": "#wikiword"
        }, {
          "include": "#accent"
        }, {
          "include": "#parameter"
        }, {
          "include": "#special"
        }]
      }
    }
  },

  {
    "comment": "[http://foo|",
    "include": "#http-link"
  },

  {
    "comment": "block code sample, spaces followed by '|' and space",
    "match": "^ *\\|($| .+$|\\{[^\\}]*\\} .+$)",
    "captures": {
      "0": {"patterns": [{"include": "#code-block"}]}
    }
  },

  {
    "comment": "inline code sample, |{descr}code|; before 'special'",
    "include": "#code-inline"
  },

  {
    "comment": "text between '[' and ']' without adjasted spaces",
    "include": "#wikiword"
  },

  {
    "comment": "text between '`' without adjasted spaces",
    "include": "#accent"
  },

  {
    "comment": "text between {} prefixed with a single letter and a space",
    "include": "#parameter"
  },

  {
    "comment": "text between '|' and '|' without adjasted spaces",
    "include": "#special"
  }],

  "repository": {
    "header-end": {
      "patterns": [{
        "comment": "plain header, ex 'foo .'",
        "match": "[^ ] (\\.|@)$",
        "captures": {
          "1": {"name": "punctuation.definition.tag.xi"}
        }
      },{
        "comment": "header that is itself a link, ex 'foo[] .', no spaces",
        "match": "[^ ](\\[\\]) (\\.|@)$",
        "captures": {
          "1": {"name": "constant.character.xi"},
          "2": {"name": "punctuation.definition.tag.xi"}
        }
      }, {
        "comment": "header with link, ex 'foo [bar] .', space separated",
        "match": "[^ ] +(\\[.+\\]) (\\.|@)$",
        "captures": {
          "1": {
            "name": "punctuation.definition.tag.xi",
            "patterns": [{
              "match": "\\[(.+)\\]",
              "captures": {
                "1": {"name": "constant.character.xi"}
              }
            }]
          },
          "2": {"name": "punctuation.definition.tag.xi"}
        }
      }]
    },

    "special": {
      "patterns": [{
        "comment": "text like ||foo||",
        "match": "\\|([^ ]+)\\|",
        "name": "punctuation.definition.tag.xi",
        "captures": {"1": {"name": "beginning.punctuation.definition.quote.markdown.xi"}}
      }, {
        "comment": "text like |foo bar baz|",
        "match": "\\|([^ \\|][^\\|]*[^ \\|])\\|",
        "name": "punctuation.definition.tag.xi",
        "captures": {"1": {"name": "beginning.punctuation.definition.quote.markdown.xi"}}
      }]
    },

    "accent": {
      "patterns": [{
        "comment": "`foo bar baz`",
        "match": "`([^ `]?)`|`([^ `][^`]*[^ `])`",
        "name": "punctuation.definition.tag.xi",
        "captures": {
          "1": {"name": "accent.xi"},
          "2": {"name": "accent.xi"}
        }
      }]
    },

    "parameter": {
      "patterns": [{
        "comment": "'{i}",
        "match": "(\\{)([^ \\}])(\\})",
        "name": "constant.other.color.rgb-value.xi",
        "captures": {
          "1": {"name": "punctuation.definition.tag.xi"},
          "2": {"name": "constant.character.character-class.regexp.xi"},
          "3": {"name": "punctuation.definition.tag.xi"}
        }
      }, {
        "comment": "'{i foo}",
        "match": "(\\{)([^ \\}]) [^\\}]+(\\})",
        "name": "constant.other.color.rgb-value.xi",
        "captures": {
          "1": {"name": "punctuation.definition.tag.xi"},
          "2": {"name": "constant.character.character-class.regexp.xi"},
          "3": {"name": "punctuation.definition.tag.xi"}
        }
      }, {
        "comment": "{i(type)}",
        "match": "(\\{)([^ \\}])(\\()([^\\)]+)(\\))(\\})",
        "name": "constant.other.color.rgb-value.xi",
        "captures": {
          "1": {"name": "punctuation.definition.tag.xi"},
          "2": {"name": "constant.character.character-class.regexp.xi"},
          "3": {"name": "punctuation.definition.tag.xi"},
          "4": {"name": "beginning.punctuation.definition.quote.markdown.xi"},
          "5": {"name": "punctuation.definition.tag.xi"},
          "6": {"name": "punctuation.definition.tag.xi"}
        }
      }, {
        "comment": "'{i(type) foo}",
        "match": "(\\{)([^ \\}])(\\()([^\\)]+)(\\)) [^\\}]+(\\})",
        "name": "constant.other.color.rgb-value.xi",
        "captures": {
          "1": {"name": "punctuation.definition.tag.xi"},
          "2": {"name": "constant.character.character-class.regexp.xi"},
          "3": {"name": "punctuation.definition.tag.xi"},
          "4": {"name": "beginning.punctuation.definition.quote.markdown.xi"},
          "5": {"name": "punctuation.definition.tag.xi"},
          "6": {"name": "punctuation.definition.tag.xi"}
        }
      }, {
        "comment": "Most generic case, last to match: {foo}, {Foo} etc",
        "match": "(\\{)[^ \\}][^\\}]+(\\})",
        "name": "constant.other.color.rgb-value.xi",
        "captures": {
          "1": {"name": "punctuation.definition.tag.xi"},
          "2": {"name": "punctuation.definition.tag.xi"}
        }
      }]
    },

    "wikiword": {
      "patterns": [{
        "comment": "[#link-like]",
        "match": "\\[(#[^\\]]*)\\]",
        "name": "punctuation.definition.tag.xi",
        "captures": {
          "1": {"name": "constant.character.xi"}
        }
      }, {
        "comment": "[https://link-like]",
        "match": "\\[([^:\\]]*://[^\\]]*)\\]",
        "name": "punctuation.definition.tag.xi",
        "captures": {
          "1": {"name": "constant.character.xi"},
          "2": {"name": "constant.character.xi"}
        }
      }, {
        "comment": "[foo bar baz]",
        "match": "\\[([^ \\]]?)\\]|\\[([^ \\]][^\\]]*[^ \\]])\\]",
        "name": "punctuation.definition.tag.xi",
        "captures": {
          "1": {"name": "wikiword.xi"},
          "2": {"name": "wikiword.xi"}
        }
      }]
    },

    "http-link": {
      "patterns": [{
        "comment": "|http://foo|",
        "match": "\\|(http://[^\\|]+)\\|",
        "name": "punctuation.definition.tag.xi",
        "captures": {"1": {"name": "constant.character.xi"}}
      }, {
        "comment": "|https://foo|",
        "match": "\\|(https://[^\\|]+)\\|",
        "name": "punctuation.definition.tag.xi",
        "captures": {"1": {"name": "constant.character.xi"}}
      }]
    },

    "code-block": {
      "comment": "block code sample, spaces followed by '|' and space",
      "patterns": [{
        "match": "^ *([\\.\\?\\!\\*\\#\\+\\-] )*(\\|)(\\{[^\\}]*\\})*(.*)$",
        "captures": {
          "1": {"name": "constant.other.color.rgb-value.xi"},
          "2": {"name": "punctuation.definition.tag.xi"},
          "3": {
            "patterns": [{
              "match": "\\{[^\\}]*\\}",
              "name": "punctuation.definition.tag.xi"
            }]
          },
          "4": {"name": "constant.other.color.rgb-value.xi"}
        }
      }]
    },

    "code-inline": {
      "patterns": [{
        "comment": "inline code sample, |{descr}foo|bar|",
        "match": "\\|\\{[^\\}]+\\}([^ ]+)\\|",
        "name": "punctuation.definition.tag.xi",
        "captures": {
          "1": {"name": "constant.other.color.rgb-value.xi"}
        }
      }, {
        "comment": "inline code sample, |{descr}foo bar baz|",
        "match": "\\|\\{[^\\}]+\\}([^\\|]+)\\|",
        "name": "punctuation.definition.tag.xi",
        "captures": {
          "1": {"name": "constant.other.color.rgb-value.xi"}
        }
      }]
    }
  },

	"scopeName": "text.xi"
}
